{"version":3,"sources":["../../../src/components/SearchBar/autocomplete.js"],"names":["React","useEffect","bool","func","shape","string","useFieldState","useQuery","mergeClasses","PRODUCT_SEARCH","Suggestions","defaultClasses","Autocomplete","props","setVisible","visible","queryResult","queryApi","data","error","loading","resetState","runQuery","setLoading","value","valid","length","classes","rootClassName","root_visible","root_hidden","message","products","items","variables","inputText","suggestions","propTypes"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { bool, func, shape, string } from 'prop-types';\nimport { useFieldState } from 'informed';\nimport { useQuery } from '@magento/peregrine';\n\nimport { mergeClasses } from 'src/classify';\nimport PRODUCT_SEARCH from 'src/queries/productSearch.graphql';\nimport Suggestions from './suggestions';\nimport defaultClasses from './autocomplete.css';\n\nconst Autocomplete = props => {\n    const { setVisible, visible } = props;\n\n    const [queryResult, queryApi] = useQuery(PRODUCT_SEARCH);\n    const { data, error, loading } = queryResult;\n    const { resetState, runQuery, setLoading } = queryApi;\n\n    const { value } = useFieldState('search_query');\n    const valid = value && value.length > 2;\n\n    const classes = mergeClasses(defaultClasses, props.classes);\n    const rootClassName = visible ? classes.root_visible : classes.root_hidden;\n    let message = '';\n\n    if (error) {\n        message = 'An error occurred while fetching results.';\n    } else if (loading) {\n        message = 'Fetching results...';\n    } else if (!data) {\n        message = 'Search for a product';\n    } else if (!data.products.items.length) {\n        message = 'No results were found.';\n    } else {\n        message = `${data.products.items.length} items`;\n    }\n\n    // run the query once on mount, and again whenever state changes\n    useEffect(() => {\n        if (visible && valid) {\n            setLoading(true);\n            runQuery({ variables: { inputText: value } });\n        } else if (!value) {\n            resetState();\n        }\n    }, [resetState, runQuery, setLoading, valid, value, visible]);\n\n    return (\n        <div className={rootClassName}>\n            <div className={classes.message}>{message}</div>\n            <div className={classes.suggestions}>\n                <Suggestions\n                    products={data ? data.products : {}}\n                    searchValue={value}\n                    setVisible={setVisible}\n                    visible={visible}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default Autocomplete;\n\nAutocomplete.propTypes = {\n    classes: shape({\n        message: string,\n        root_hidden: string,\n        root_visible: string,\n        suggestions: string\n    }),\n    setVisible: func,\n    visible: bool\n};\n"],"file":"autocomplete.js"}