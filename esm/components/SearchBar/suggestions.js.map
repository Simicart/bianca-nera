{"version":3,"sources":["../../../src/components/SearchBar/suggestions.js"],"names":["React","Fragment","useCallback","arrayOf","bool","func","shape","string","mergeClasses","SuggestedCategories","SuggestedProducts","defaultClasses","Suggestions","props","products","searchValue","setVisible","visible","filters","items","classes","onNavigate","categoryFilter","find","name","categories","filter_items","heading","propTypes","isRequired"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,QAA6C,OAA7C;AACA,SAASC,OAAT,EAAkBC,IAAlB,EAAwBC,IAAxB,EAA8BC,KAA9B,EAAqCC,MAArC,QAAmD,YAAnD;AAEA,SAASC,YAAT;AACA,OAAOC,mBAAP;AACA,OAAOC,iBAAP;AACA,OAAOC,cAAP;;AAEA,MAAMC,WAAW,GAAGC,KAAK,IAAI;AACzB,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,WAAZ;AAAyBC,IAAAA,UAAzB;AAAqCC,IAAAA;AAArC,MAAiDJ,KAAvD;AACA,QAAM;AAAEK,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAqBL,QAA3B;AACA,QAAMM,OAAO,GAAGZ,YAAY,CAACG,cAAD,EAAiBE,KAAK,CAACO,OAAvB,CAA5B;AAEA,QAAMC,UAAU,GAAGnB,WAAW,CAAC,MAAM;AACjCc,IAAAA,UAAU,CAAC,KAAD,CAAV;AACH,GAF6B,EAE3B,CAACA,UAAD,CAF2B,CAA9B;;AAIA,MAAI,CAACC,OAAD,IAAY,CAACC,OAAb,IAAwB,CAACC,KAA7B,EAAoC;AAChC,WAAO,IAAP;AACH;;AAED,QAAMG,cAAc,GAChBJ,OAAO,CAACK,IAAR,CAAa,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAcA,IAAI,KAAK,UAApC,KAAmD,EADvD;AAEA,QAAMC,UAAU,GAAGH,cAAc,CAACI,YAAf,IAA+B,EAAlD;AAEA,SACI,oBAAC,QAAD,QACI,oBAAC,mBAAD;AACI,IAAA,UAAU,EAAED,UADhB;AAEI,IAAA,UAAU,EAAEJ,UAFhB;AAGI,IAAA,KAAK,EAAEN;AAHX,IADJ,EAMI;AAAI,IAAA,SAAS,EAAEK,OAAO,CAACO;AAAvB,KACI,kCAAO,qBAAP,CADJ,CANJ,EASI,oBAAC,iBAAD;AAAmB,IAAA,UAAU,EAAEN,UAA/B;AAA2C,IAAA,QAAQ,EAAEF;AAArD,IATJ,CADJ;AAaH,CA9BD;;AAgCA,eAAeP,WAAf;AAEAA,WAAW,CAACgB,SAAZ,GAAwB;AACpBR,EAAAA,OAAO,EAAEd,KAAK,CAAC;AACXqB,IAAAA,OAAO,EAAEpB;AADE,GAAD,CADM;AAIpBO,EAAAA,QAAQ,EAAER,KAAK,CAAC;AACZY,IAAAA,OAAO,EAAEf,OAAO,CACZG,KAAK,CAAC;AACFoB,MAAAA,YAAY,EAAEvB,OAAO,CAACG,KAAK,CAAC,EAAD,CAAN,CADnB;AAEFkB,MAAAA,IAAI,EAAEjB,MAAM,CAACsB;AAFX,KAAD,CAAL,CAGGA,UAJS,CADJ;AAOZV,IAAAA,KAAK,EAAEhB,OAAO,CAACG,KAAK,CAAC,EAAD,CAAN;AAPF,GAAD,CAJK;AAapBS,EAAAA,WAAW,EAAER,MAbO;AAcpBS,EAAAA,UAAU,EAAEX,IAdQ;AAepBY,EAAAA,OAAO,EAAEb;AAfW,CAAxB","sourcesContent":["import React, { Fragment, useCallback } from 'react';\nimport { arrayOf, bool, func, shape, string } from 'prop-types';\n\nimport { mergeClasses } from 'src/classify';\nimport SuggestedCategories from './suggestedCategories';\nimport SuggestedProducts from './suggestedProducts';\nimport defaultClasses from './suggestions.css';\n\nconst Suggestions = props => {\n    const { products, searchValue, setVisible, visible } = props;\n    const { filters, items } = products;\n    const classes = mergeClasses(defaultClasses, props.classes);\n\n    const onNavigate = useCallback(() => {\n        setVisible(false);\n    }, [setVisible]);\n\n    if (!visible || !filters || !items) {\n        return null;\n    }\n\n    const categoryFilter =\n        filters.find(({ name }) => name === 'Category') || {};\n    const categories = categoryFilter.filter_items || [];\n\n    return (\n        <Fragment>\n            <SuggestedCategories\n                categories={categories}\n                onNavigate={onNavigate}\n                value={searchValue}\n            />\n            <h2 className={classes.heading}>\n                <span>{'Product Suggestions'}</span>\n            </h2>\n            <SuggestedProducts onNavigate={onNavigate} products={items} />\n        </Fragment>\n    );\n};\n\nexport default Suggestions;\n\nSuggestions.propTypes = {\n    classes: shape({\n        heading: string\n    }),\n    products: shape({\n        filters: arrayOf(\n            shape({\n                filter_items: arrayOf(shape({})),\n                name: string.isRequired\n            }).isRequired\n        ),\n        items: arrayOf(shape({}))\n    }),\n    searchValue: string,\n    setVisible: func,\n    visible: bool\n};\n"],"file":"suggestions.js"}