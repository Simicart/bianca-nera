{"version":3,"sources":["../../../src/components/SignIn/signIn.js"],"names":["React","Component","bool","func","object","shape","string","Form","Button","Field","LoadingIndicator","TextInput","isRequired","defaultClasses","classify","SignIn","username","formApi","getValue","props","setDefaultUsername","onForgotPassword","password","signIn","showCreateAccountForm","errorMessage","signInError","hasError","Object","keys","length","render","classes","isGettingDetails","isSigningIn","onSignIn","modal_active","root","form","setFormApi","signInButton","forgotPassword","handleForgotPassword","signInDivider","showCreateAccountButton","modal","signInSection"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { bool, func, object, shape, string } from 'prop-types';\nimport { Form } from 'informed';\n\nimport Button from 'src/components/Button';\nimport Field from 'src/components/Field';\nimport LoadingIndicator from 'src/components/LoadingIndicator';\nimport TextInput from 'src/components/TextInput';\n\nimport { isRequired } from 'src/util/formValidators';\n\nimport defaultClasses from './signIn.css';\nimport classify from 'src/classify';\n\nclass SignIn extends Component {\n    static propTypes = {\n        classes: shape({\n            forgotPassword: string,\n            form: string,\n            modal: string,\n            modal_active: string,\n            root: string,\n            showCreateAccountButton: string,\n            signInDivider: string,\n            signInError: string,\n            signInSection: string\n        }),\n        isGettingDetails: bool,\n        isSigningIn: bool,\n        onForgotPassword: func.isRequired,\n        setDefaultUsername: func,\n        signIn: func,\n        signInError: object\n    };\n\n    get errorMessage() {\n        const { signInError } = this.props;\n        const hasError = signInError && Object.keys(signInError).length;\n\n        if (hasError) {\n            // Note: we can't access the actual message that comes back from the server\n            // without doing some fragile string manipulation. Hardcoded for now.\n            return 'The account sign-in was incorrect or your account is disabled temporarily. Please wait and try again later.';\n        }\n    }\n\n    render() {\n        const { classes, isGettingDetails, isSigningIn } = this.props;\n        const { onSignIn, errorMessage } = this;\n\n        if (isGettingDetails || isSigningIn) {\n            return (\n                <div className={classes.modal_active}>\n                    <LoadingIndicator>Signing In</LoadingIndicator>\n                </div>\n            );\n        } else {\n            return (\n                <div className={classes.root}>\n                    <Form\n                        className={classes.form}\n                        getApi={this.setFormApi}\n                        onSubmit={onSignIn}\n                    >\n                        <Field label=\"Email\" required={true}>\n                            <TextInput\n                                autoComplete=\"email\"\n                                field=\"email\"\n                                validate={isRequired}\n                                validateOnBlur\n                            />\n                        </Field>\n                        <Field label=\"Password\" required={true}>\n                            <TextInput\n                                autoComplete=\"current-password\"\n                                field=\"password\"\n                                type=\"password\"\n                                validate={isRequired}\n                                validateOnBlur\n                            />\n                        </Field>\n                        <div className={classes.signInButton}>\n                            <Button priority=\"high\" type=\"submit\">\n                                Sign In\n                            </Button>\n                        </div>\n                        <div className={classes.signInError}>\n                            {errorMessage}\n                        </div>\n                        <button\n                            type=\"button\"\n                            className={classes.forgotPassword}\n                            onClick={this.handleForgotPassword}\n                        >\n                            Forgot password?\n                        </button>\n                    </Form>\n                    <div className={classes.signInDivider} />\n                    <div className={classes.showCreateAccountButton}>\n                        <Button\n                            priority=\"high\"\n                            onClick={this.showCreateAccountForm}\n                        >\n                            Create an Account\n                        </Button>\n                    </div>\n                </div>\n            );\n        }\n    }\n\n    handleForgotPassword = () => {\n        const username = this.formApi.getValue('email');\n\n        if (this.props.setDefaultUsername) {\n            this.props.setDefaultUsername(username);\n        }\n\n        this.props.onForgotPassword();\n    };\n\n    onSignIn = () => {\n        const username = this.formApi.getValue('email');\n        const password = this.formApi.getValue('password');\n\n        this.props.signIn({ username, password });\n    };\n\n    setFormApi = formApi => {\n        this.formApi = formApi;\n    };\n\n    showCreateAccountForm = () => {\n        const username = this.formApi.getValue('email');\n\n        if (this.props.setDefaultUsername) {\n            this.props.setDefaultUsername(username);\n        }\n\n        this.props.showCreateAccountForm();\n    };\n}\n\nexport default classify(defaultClasses)(SignIn);\n"],"file":"signIn.js"}