{"version":3,"sources":["../../../src/actions/user/asyncActions.js"],"names":["RestApi","Util","refresh","getCartDetails","removeCart","actions","request","Magento2","BrowserPersistence","storage","signIn","credentials","thunk","args","dispatch","body","username","password","response","method","JSON","stringify","setToken","receive","getUserDetails","forceRefresh","error","signOut","history","clearToken","reset","getState","user","isSignedIn","getDetails","userDetails","createNewUserRequest","accountInfo","resetCreateAccountError","customer","email","createAccountError","createAccount","e","resetPassword","Promise","resolve","completePasswordReset","token","setItem","removeItem"],"mappings":"AAAA,SAASA,OAAT,QAAwB,oBAAxB;AACA,SAASC,IAAT,QAAqB,oBAArB;AACA,SAASC,OAAT;AACA,SAASC,cAAT,EAAyBC,UAAzB;AAEA,OAAOC,OAAP;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAcN,OAAO,CAACO,QAA5B;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAyBP,IAA/B;AACA,MAAMQ,OAAO,GAAG,IAAID,kBAAJ,EAAhB;AAEA,OAAO,MAAME,MAAM,GAAGC,WAAW,IAC7B,eAAeC,KAAf,CAAqB,GAAGC,IAAxB,EAA8B;AAC1B,QAAM,CAACC,QAAD,IAAaD,IAAnB;AAEAC,EAAAA,QAAQ,CAACT,OAAO,CAACK,MAAR,CAAeJ,OAAf,EAAD,CAAR;;AAEA,MAAI;AACA,UAAMS,IAAI,GAAG;AACTC,MAAAA,QAAQ,EAAEL,WAAW,CAACK,QADb;AAETC,MAAAA,QAAQ,EAAEN,WAAW,CAACM;AAFb,KAAb;AAKA,UAAMC,QAAQ,GAAG,MAAMZ,OAAO,CAC1B,qCAD0B,EAE1B;AACIa,MAAAA,MAAM,EAAE,MADZ;AAEIJ,MAAAA,IAAI,EAAEK,IAAI,CAACC,SAAL,CAAeN,IAAf;AAFV,KAF0B,CAA9B;AAQAO,IAAAA,QAAQ,CAACJ,QAAD,CAAR;AAEA,UAAMJ,QAAQ,CAACT,OAAO,CAACK,MAAR,CAAea,OAAf,CAAuBL,QAAvB,CAAD,CAAd,CAhBA,CAkBA;;AACAJ,IAAAA,QAAQ,CAACU,cAAc,EAAf,CAAR,CAnBA,CAqBA;AACA;;AACA,UAAMV,QAAQ,CAACV,UAAU,EAAX,CAAd;AACAU,IAAAA,QAAQ,CAACX,cAAc,CAAC;AAAEsB,MAAAA,YAAY,EAAE;AAAhB,KAAD,CAAf,CAAR;AACH,GAzBD,CAyBE,OAAOC,KAAP,EAAc;AACZZ,IAAAA,QAAQ,CAACT,OAAO,CAACK,MAAR,CAAea,OAAf,CAAuBG,KAAvB,CAAD,CAAR;AACH;AACJ,CAlCE;AAoCP,OAAO,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiB,MAAMd,QAAN,IAAkB;AACtD;AACA,QAAMe,UAAU,EAAhB;AACA,QAAMf,QAAQ,CAACT,OAAO,CAACK,MAAR,CAAeoB,KAAf,EAAD,CAAd,CAHsD,CAKtD;AACA;;AACA,QAAMhB,QAAQ,CAACV,UAAU,EAAX,CAAd;AACAU,EAAAA,QAAQ,CAACX,cAAc,CAAC;AAAEsB,IAAAA,YAAY,EAAE;AAAhB,GAAD,CAAf,CAAR,CARsD,CAUtD;;AACAvB,EAAAA,OAAO,CAAC;AAAE0B,IAAAA;AAAF,GAAD,CAAP;AACH,CAZM;AAcP,OAAO,MAAMJ,cAAc,GAAG,MAC1B,eAAeZ,KAAf,CAAqB,GAAGC,IAAxB,EAA8B;AAC1B,QAAM,CAACC,QAAD,EAAWiB,QAAX,IAAuBlB,IAA7B;AACA,QAAM;AAAEmB,IAAAA;AAAF,MAAWD,QAAQ,EAAzB;;AAEA,MAAIC,IAAI,CAACC,UAAT,EAAqB;AACjBnB,IAAAA,QAAQ,CAACT,OAAO,CAAC6B,UAAR,CAAmB5B,OAAnB,EAAD,CAAR;;AAEA,QAAI;AACA,YAAM6B,WAAW,GAAG,MAAM7B,OAAO,CAAC,uBAAD,EAA0B;AACvDa,QAAAA,MAAM,EAAE;AAD+C,OAA1B,CAAjC;AAIAL,MAAAA,QAAQ,CAACT,OAAO,CAAC6B,UAAR,CAAmBX,OAAnB,CAA2BY,WAA3B,CAAD,CAAR;AACH,KAND,CAME,OAAOT,KAAP,EAAc;AACZZ,MAAAA,QAAQ,CAACT,OAAO,CAAC6B,UAAR,CAAmBX,OAAnB,CAA2BG,KAA3B,CAAD,CAAR;AACH;AACJ;AACJ,CAlBE;AAoBP,OAAO,MAAMU,oBAAoB,GAAGC,WAAW,IAC3C,eAAezB,KAAf,CAAqB,GAAGC,IAAxB,EAA8B;AAC1B,QAAM,CAACC,QAAD,IAAaD,IAAnB;AAEAC,EAAAA,QAAQ,CAACT,OAAO,CAACiC,uBAAR,CAAgChC,OAAhC,EAAD,CAAR;;AAEA,MAAI;AACA,UAAMA,OAAO,CAAC,oBAAD,EAAuB;AAChCa,MAAAA,MAAM,EAAE,MADwB;AAEhCJ,MAAAA,IAAI,EAAEK,IAAI,CAACC,SAAL,CAAegB,WAAf;AAF0B,KAAvB,CAAb;AAKA,UAAMvB,QAAQ,CACVJ,MAAM,CAAC;AACHM,MAAAA,QAAQ,EAAEqB,WAAW,CAACE,QAAZ,CAAqBC,KAD5B;AAEHvB,MAAAA,QAAQ,EAAEoB,WAAW,CAACpB;AAFnB,KAAD,CADI,CAAd;AAMH,GAZD,CAYE,OAAOS,KAAP,EAAc;AACZZ,IAAAA,QAAQ,CAACT,OAAO,CAACoC,kBAAR,CAA2BlB,OAA3B,CAAmCG,KAAnC,CAAD,CAAR;AAEA;;;;AAGA,UAAMA,KAAN;AACH;AACJ,CA1BE;AA4BP,OAAO,MAAMgB,aAAa,GAAGL,WAAW,IAAI,MAAMvB,QAAN,IAAkB;AAC1D;;;;;AAKA,MAAI;AACA,UAAMA,QAAQ,CAACsB,oBAAoB,CAACC,WAAD,CAArB,CAAd;AACH,GAFD,CAEE,OAAOM,CAAP,EAAU,CAAE;AACjB,CATM;AAWP,OAAO,MAAMC,aAAa,GAAG,CAAC;AAAEJ,EAAAA;AAAF,CAAD,KACzB,eAAe5B,KAAf,CAAqB,GAAGC,IAAxB,EAA8B;AAC1B,QAAM,CAACC,QAAD,IAAaD,IAAnB;AAEAC,EAAAA,QAAQ,CAACT,OAAO,CAACuC,aAAR,CAAsBtC,OAAtB,CAA8BkC,KAA9B,CAAD,CAAR,CAH0B,CAK1B;AACA;;AACA,QAAMtB,QAAQ,GAAG,MAAM2B,OAAO,CAACC,OAAR,CAAgBN,KAAhB,CAAvB;AAEA1B,EAAAA,QAAQ,CAACT,OAAO,CAACuC,aAAR,CAAsBrB,OAAtB,CAA8BL,QAA9B,CAAD,CAAR;AACH,CAXE;AAaP,OAAO,MAAM6B,qBAAqB,GAAGP,KAAK,IAAI,MAAM1B,QAAN,IAC1CA,QAAQ,CAACT,OAAO,CAAC0C,qBAAR,CAA8BP,KAA9B,CAAD,CADL;;AAGP,eAAelB,QAAf,CAAwB0B,KAAxB,EAA+B;AAC3B;AACA,SAAOvC,OAAO,CAACwC,OAAR,CAAgB,cAAhB,EAAgCD,KAAhC,EAAuC,IAAvC,CAAP;AACH;;AAED,eAAenB,UAAf,GAA4B;AACxB,SAAOpB,OAAO,CAACyC,UAAR,CAAmB,cAAnB,CAAP;AACH","sourcesContent":["import { RestApi } from '@magento/peregrine';\nimport { Util } from '@magento/peregrine';\nimport { refresh } from 'src/util/router-helpers';\nimport { getCartDetails, removeCart } from 'src/actions/cart';\n\nimport actions from './actions';\n\nconst { request } = RestApi.Magento2;\nconst { BrowserPersistence } = Util;\nconst storage = new BrowserPersistence();\n\nexport const signIn = credentials =>\n    async function thunk(...args) {\n        const [dispatch] = args;\n\n        dispatch(actions.signIn.request());\n\n        try {\n            const body = {\n                username: credentials.username,\n                password: credentials.password\n            };\n\n            const response = await request(\n                '/rest/V1/integration/customer/token',\n                {\n                    method: 'POST',\n                    body: JSON.stringify(body)\n                }\n            );\n\n            setToken(response);\n\n            await dispatch(actions.signIn.receive(response));\n\n            // Now that we're signed in, get this user's details.\n            dispatch(getUserDetails());\n\n            // Now that we're signed in, forget the old (guest) cart\n            // and fetch this customer's cart.\n            await dispatch(removeCart());\n            dispatch(getCartDetails({ forceRefresh: true }));\n        } catch (error) {\n            dispatch(actions.signIn.receive(error));\n        }\n    };\n\nexport const signOut = ({ history }) => async dispatch => {\n    // Sign the user out in local storage and Redux.\n    await clearToken();\n    await dispatch(actions.signIn.reset());\n\n    // Now that we're signed out, forget the old (customer) cart\n    // and fetch a new guest cart.\n    await dispatch(removeCart());\n    dispatch(getCartDetails({ forceRefresh: true }));\n\n    // Finally, go back to the first page of the browser history.\n    refresh({ history });\n};\n\nexport const getUserDetails = () =>\n    async function thunk(...args) {\n        const [dispatch, getState] = args;\n        const { user } = getState();\n\n        if (user.isSignedIn) {\n            dispatch(actions.getDetails.request());\n\n            try {\n                const userDetails = await request('/rest/V1/customers/me', {\n                    method: 'GET'\n                });\n\n                dispatch(actions.getDetails.receive(userDetails));\n            } catch (error) {\n                dispatch(actions.getDetails.receive(error));\n            }\n        }\n    };\n\nexport const createNewUserRequest = accountInfo =>\n    async function thunk(...args) {\n        const [dispatch] = args;\n\n        dispatch(actions.resetCreateAccountError.request());\n\n        try {\n            await request('/rest/V1/customers', {\n                method: 'POST',\n                body: JSON.stringify(accountInfo)\n            });\n\n            await dispatch(\n                signIn({\n                    username: accountInfo.customer.email,\n                    password: accountInfo.password\n                })\n            );\n        } catch (error) {\n            dispatch(actions.createAccountError.receive(error));\n\n            /*\n             * Throw error again to notify async action which dispatched handleCreateAccount.\n             */\n            throw error;\n        }\n    };\n\nexport const createAccount = accountInfo => async dispatch => {\n    /*\n     * Server validation error is handled in handleCreateAccount.\n     * We set createAccountError in Redux and throw error again\n     * to notify redux-thunk action which dispatched handleCreateAccount action.\n     */\n    try {\n        await dispatch(createNewUserRequest(accountInfo));\n    } catch (e) {}\n};\n\nexport const resetPassword = ({ email }) =>\n    async function thunk(...args) {\n        const [dispatch] = args;\n\n        dispatch(actions.resetPassword.request(email));\n\n        // TODO: actually make the call to the API.\n        // For now, just return a resolved promise.\n        const response = await Promise.resolve(email);\n\n        dispatch(actions.resetPassword.receive(response));\n    };\n\nexport const completePasswordReset = email => async dispatch =>\n    dispatch(actions.completePasswordReset(email));\n\nasync function setToken(token) {\n    // TODO: Get correct token expire time from API\n    return storage.setItem('signin_token', token, 3600);\n}\n\nasync function clearToken() {\n    return storage.removeItem('signin_token');\n}\n"],"file":"asyncActions.js"}