{"version":3,"sources":["../../src/util/makeUrl.js"],"names":["imageOptimizingOrigin","backend","document","querySelector","dataset","useBackendForImgs","mediaBases","Map","set","process","env","MAGENTO_BACKEND_MEDIA_PATH_PRODUCT","MAGENTO_BACKEND_MEDIA_PATH_CATEGORY","makeOptimizedUrl","path","type","width","href","origin","window","location","urlObject","URL","has","mediaBase","get","pathname","includes","startsWith","slice","length","params","URLSearchParams","search","toString"],"mappings":"AAAA;AACA,MAAM;AAAEA,EAAAA,qBAAF;AAAyBC,EAAAA;AAAzB,IAAqCC,QAAQ,CAACC,aAAT,CACvC,MADuC,EAEzCC,OAFF;AAGA,MAAMC,iBAAiB,GAAGJ,OAAO,IAAID,qBAAqB,KAAK,SAA/D;AAEA,MAAMM,UAAU,GAAG,IAAIC,GAAJ,GACdC,GADc,CAEX,eAFW,EAGXC,OAAO,CAACC,GAAR,CAAYC,kCAAZ,IACI,wBAJO,EAMdH,GANc,CAOX,gBAPW,EAQXC,OAAO,CAACC,GAAR,CAAYE,mCAAZ,IACI,yBATO,CAAnB;AAYA;;;;;;;;;;;;;;;;;;;;;;AAqBA,MAAMC,gBAAgB,GAAG,CAACC,IAAD,EAAO;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,IAAkB,EAAzB,KAAgC;AACrD,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAmBC,MAAM,CAACC,QAAhC;AACA,MAAIC,SAAS,GAAG,IAAIC,GAAJ,CAAQR,IAAR,EAAcG,IAAd,CAAhB;;AAEA,MAAIF,IAAJ,EAAU;AACN,QAAIT,UAAU,CAACiB,GAAX,CAAeR,IAAf,CAAJ,EAA0B;AACtB,YAAMS,SAAS,GAAGlB,UAAU,CAACmB,GAAX,CAAeV,IAAf,CAAlB,CADsB,CAEtB;;AACA,UAAI,CAACM,SAAS,CAACK,QAAV,CAAmBC,QAAnB,CAA4BH,SAA5B,CAAL,EAA6C;AACzCH,QAAAA,SAAS,CAACK,QAAV,GAAqBF,SAAS,GAAGH,SAAS,CAACK,QAA3C;AACH;AACJ,KAPK,CAQN;;;AACA,QAAIX,IAAI,CAACa,UAAL,CAAgB,QAAhB,CAAJ,EAA+B;AAC3B,UAAIvB,iBAAJ,EAAuB;AACnBgB,QAAAA,SAAS,GAAG,IAAIC,GAAJ,CACRD,SAAS,CAACJ,IAAV,CAAeY,KAAf,CAAqBR,SAAS,CAACH,MAAV,CAAiBY,MAAtC,CADQ,EAER7B,OAFQ,CAAZ;AAIH,OALD,MAKO,IAAIa,IAAI,CAACc,UAAL,CAAgB3B,OAAhB,KAA4B,CAACI,iBAAjC,EAAoD;AACvD;AACA;AACA;AACA;AACAgB,QAAAA,SAAS,GAAG,IAAIC,GAAJ,CAAQR,IAAI,CAACe,KAAL,CAAW5B,OAAO,CAAC6B,MAAnB,CAAR,EAAoCZ,MAApC,CAAZ;AACH;;AACD,YAAMa,MAAM,GAAG,IAAIC,eAAJ,CAAoBX,SAAS,CAACY,MAA9B,CAAf;AACAF,MAAAA,MAAM,CAACvB,GAAP,CAAW,MAAX,EAAmB,MAAnB,EAd2B,CAcC;;AAC5BuB,MAAAA,MAAM,CAACvB,GAAP,CAAW,QAAX,EAAqB,MAArB,EAf2B,CAeG;;AAC9B,UAAIQ,KAAJ,EAAW;AACP;AACAe,QAAAA,MAAM,CAACvB,GAAP,CAAW,OAAX,EAAoBQ,KAApB;AACH;;AACDK,MAAAA,SAAS,CAACY,MAAV,GAAmBF,MAAM,CAACG,QAAP,EAAnB;AACH;AACJ;;AAED,MAAIb,SAAS,CAACH,MAAV,KAAqBA,MAAzB,EAAiC;AAC7B,WAAOG,SAAS,CAACJ,IAAV,CAAeY,KAAf,CAAqBX,MAAM,CAACY,MAA5B,CAAP;AACH;;AACD,SAAOT,SAAS,CAACJ,IAAjB;AACH,CAzCD;;AA2CA,eAAeJ,gBAAf","sourcesContent":["// If the root template supplies the backend URL at runtime, use it directly\nconst { imageOptimizingOrigin, backend } = document.querySelector(\n    'html'\n).dataset;\nconst useBackendForImgs = backend && imageOptimizingOrigin === 'backend';\n\nconst mediaBases = new Map()\n    .set(\n        'image-product',\n        process.env.MAGENTO_BACKEND_MEDIA_PATH_PRODUCT ||\n            '/media/catalog/product'\n    )\n    .set(\n        'image-category',\n        process.env.MAGENTO_BACKEND_MEDIA_PATH_CATEGORY ||\n            '/media/catalog/category'\n    );\n\n/**\n * Creates an \"optimized\" url for a provided absolute or relative url based on\n * requested media type and width. Any image URLs (whose type begins with\n * \"image-\" will also be optimized.)\n *\n * If a `type` is provided the `path` will be joined with the associated media\n * base.\n *  - `/media/catalog/product/path/to/img.jpg`\n *\n * If a `width` is provided, \"resize parameters\" are added to the URL for\n * middlewares (either onboard or backend) to return using the desired width\n * and original media url.\n *  - `/media/catalog/product/path/to/img.jpg?width=500&auto=webp&format=pjpg\n *\n * If only `path` is provided it is returned unaltered.\n *\n * @param {string} path - absolute or relative url to resource.\n * @param {Object} props - properties describing desired optimizations\n * @param {string} props.type - \"image-product\" or \"image-category\"\n * @param {number} props.width - the desired resize width of the image\n */\nconst makeOptimizedUrl = (path, { type, width } = {}) => {\n    const { href, origin } = window.location;\n    let urlObject = new URL(path, href);\n\n    if (type) {\n        if (mediaBases.has(type)) {\n            const mediaBase = mediaBases.get(type);\n            // prepend media base if it isn't already part of the pathname\n            if (!urlObject.pathname.includes(mediaBase)) {\n                urlObject.pathname = mediaBase + urlObject.pathname;\n            }\n        }\n        // add image optimization parameters and optionally change origin\n        if (type.startsWith('image-')) {\n            if (useBackendForImgs) {\n                urlObject = new URL(\n                    urlObject.href.slice(urlObject.origin.length),\n                    backend\n                );\n            } else if (path.startsWith(backend) && !useBackendForImgs) {\n                // Some API responses include absolute URLs to images.\n                // The backend won't optimize images, so do not use this\n                // absolute URL; instead, use a relative URL which has a chance\n                // of being passed through image optimization.\n                urlObject = new URL(path.slice(backend.length), origin);\n            }\n            const params = new URLSearchParams(urlObject.search);\n            params.set('auto', 'webp'); // Use the webp format if available\n            params.set('format', 'pjpg'); // Use progressive JPGs at least\n            if (width) {\n                // resize!\n                params.set('width', width);\n            }\n            urlObject.search = params.toString();\n        }\n    }\n\n    if (urlObject.origin === origin) {\n        return urlObject.href.slice(origin.length);\n    }\n    return urlObject.href;\n};\n\nexport default makeOptimizedUrl;\n"],"file":"makeUrl.js"}