{"version":3,"sources":["../../src/util/formValidators.js"],"names":["SUCCESS","undefined","hasLengthAtLeast","value","values","minimumLength","length","hasLengthAtMost","maximumLength","hasLengthExactly","isRequired","trim","validateEmail","regex","test","validateRegionCode","countries","country","find","id","available_regions","regions","Array","isArray","region","code","validatePassword","count","lower","upper","digit","special","char","Object","filter","Boolean","validateConfirmPassword","passwordKey"],"mappings":"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","sourcesContent":["/**\n * @fileoverview This file houses functions that can be used for\n * validation of form fields.\n *\n * Note that these functions should return a string error message\n * when they fail, and `undefined` when they pass.\n */\n\nconst SUCCESS = undefined;\n\nexport const hasLengthAtLeast = (value, values, minimumLength) => {\n    if (!value || value.length < minimumLength) {\n        return `Must contain at least ${minimumLength} character(s).`;\n    }\n\n    return SUCCESS;\n};\n\nexport const hasLengthAtMost = (value, values, maximumLength) => {\n    if (value && value.length > maximumLength) {\n        return `Must not exceed ${maximumLength} character(s).`;\n    }\n\n    return SUCCESS;\n};\n\nexport const hasLengthExactly = (value, values, length) => {\n    if (value && value.length !== length) {\n        return `Must contain exactly ${length} character(s).`;\n    }\n\n    return SUCCESS;\n};\n\nexport const isRequired = value => {\n    return (value || '').trim() ? SUCCESS : 'The field is required.';\n};\n\nexport const validateEmail = value => {\n    const regex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n    return regex.test(value)\n        ? SUCCESS\n        : 'Please enter a valid email address (Ex: johndoe@domain.com).';\n};\n\nexport const validateRegionCode = (value, values, countries) => {\n    const country = countries.find(({ id }) => id === 'US');\n\n    if (!country) {\n        return 'Country \"US\" is not an available country.';\n    }\n    const { available_regions: regions } = country;\n\n    if (!(Array.isArray(regions) && regions.length)) {\n        return 'Country \"US\" does not contain any available regions.';\n    }\n\n    const region = regions.find(({ code }) => code === value);\n    if (!region) {\n        return `State \"${value}\" is not an valid state abbreviation.`;\n    }\n\n    return SUCCESS;\n};\n\nexport const validatePassword = value => {\n    const count = {\n        lower: 0,\n        upper: 0,\n        digit: 0,\n        special: 0\n    };\n\n    for (const char of value) {\n        if (/[a-z]/.test(char)) count.lower++;\n        else if (/[A-Z]/.test(char)) count.upper++;\n        else if (/\\d/.test(char)) count.digit++;\n        else if (/\\S/.test(char)) count.special++;\n    }\n\n    if (Object.values(count).filter(Boolean).length < 3) {\n        return 'A password must contain at least 3 of the following: lowercase, uppercase, digits, special characters.';\n    }\n\n    return SUCCESS;\n};\n\nexport const validateConfirmPassword = (\n    value,\n    values,\n    passwordKey = 'password'\n) => {\n    return value === values[passwordKey] ? SUCCESS : 'Passwords must match.';\n};\n"],"file":"formValidators.js"}